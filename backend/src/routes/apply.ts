import { Router, Request, Response } from 'express';
import JobScraper, { SearchCriteria } from '../services/JobScraper';
import AutoApplyService, {
    AutoApplySettings,
} from '../services/AutoApplyService';
import ProfileService, { UserProfile } from '../services/ProfileService';
import AuthService from '../services/AuthService';

const router = Router();
const globalProfileService = new ProfileService();

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—è–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const applicationHistory: any[] = [];
const userStats = new Map<string, any>();

// POST /api/apply/profile - –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
router.post('/profile', async (req: Request, res: Response) => {
    try {
        const profileData = req.body;
        const profile = await globalProfileService.createProfile(profileData);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStats.set(profile.id, {
            totalApplications: 0,
            successfulApplications: 0,
            applicationsThisWeek: 0,
            applicationsThisMonth: 0,
            lastApplicationDate: null,
            platformStats: {},
            companyStats: {},
        });

        res.status(201).json({
            success: true,
            message: '–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω',
            profile: {
                id: profile.id,
                email: profile.email,
                firstName: profile.firstName,
                lastName: profile.lastName,
            },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
        });
    }
});

// GET /api/apply/profile/:id - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
router.get('/profile/:id', async (req: Request, res: Response) => {
    try {
        const profile = await globalProfileService.getProfile(req.params.id);

        if (!profile) {
            return res.status(404).json({
                success: false,
                message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –ø—Ä–æ—Ñ–∏–ª—é
        const stats = userStats.get(req.params.id) || {
            totalApplications: 0,
            successfulApplications: 0,
            applicationsThisWeek: 0,
            applicationsThisMonth: 0,
        };

        res.json({
            success: true,
            profile: {
                ...profile,
                stats,
            },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
        });
    }
});

// GET /api/apply/applications/:userId - –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/applications/:userId', async (req: Request, res: Response) => {
    try {
        const { userId } = req.params;
        const { limit = 50, offset = 0, status, platform } = req.query;

        let userApplications = applicationHistory.filter(
            (app) => app.userId === userId
        );

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (status) {
            userApplications = userApplications.filter(
                (app) => app.status === status
            );
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if (platform) {
            userApplications = userApplications.filter(
                (app) => app.platform === platform
            );
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const total = userApplications.length;
        const applications = userApplications.slice(
            Number(offset),
            Number(offset) + Number(limit)
        );

        res.json({
            success: true,
            applications,
            total,
            limit: Number(limit),
            offset: Number(offset),
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫',
        });
    }
});

// GET /api/apply/stats/:userId - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats/:userId', async (req: Request, res: Response) => {
    try {
        const { userId } = req.params;
        const stats = userStats.get(userId);

        if (!stats) {
            return res.status(404).json({
                success: false,
                message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            });
        }

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        const userApplications = applicationHistory.filter(
            (app) => app.userId === userId
        );
        const platformBreakdown: Record<string, number> = {};
        const statusBreakdown: Record<string, number> = {};
        const companyBreakdown: Record<string, number> = {};

        userApplications.forEach((app) => {
            // –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            platformBreakdown[app.platform] =
                (platformBreakdown[app.platform] || 0) + 1;

            // –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            statusBreakdown[app.applicationResult] =
                (statusBreakdown[app.applicationResult] || 0) + 1;

            // –ü–æ –∫–æ–º–ø–∞–Ω–∏—è–º
            companyBreakdown[app.company] =
                (companyBreakdown[app.company] || 0) + 1;
        });

        res.json({
            success: true,
            stats: {
                ...stats,
                platformBreakdown,
                statusBreakdown,
                companyBreakdown,
                successRate:
                    stats.totalApplications > 0
                        ? (
                              (stats.successfulApplications /
                                  stats.totalApplications) *
                              100
                          ).toFixed(1)
                        : 0,
            },
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        });
    }
});

// POST /api/apply/start - –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫
router.post('/start', async (req: Request, res: Response) => {
    try {
        const { searchCriteria, settings, credentials, profileId } = req.body;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º profileId –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        let profile;
        let userId;

        if (profileId) {
            profile = await globalProfileService.getProfile(profileId);
            if (!profile) {
                return res.status(404).json({
                    success: false,
                    message: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                });
            }
            userId = profileId;
        } else {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            profile = {
                id: `temp-profile-${Date.now()}`,
                email: credentials?.email || 'test@example.com',
                firstName: 'John',
                lastName: 'Doe',
                phone: '+1234567890',
                location: 'New York, NY',
                resume: {
                    summary: 'Experienced software engineer',
                    skills: ['JavaScript', 'React', 'Node.js', 'TypeScript'],
                    experience: [],
                    education: [],
                },
                jobPreferences: {
                    desiredRoles: ['Software Engineer'],
                    preferredLocations: ['Remote'],
                    salaryRange: { min: 80000, max: 150000 },
                    workType: 'any' as const,
                    experienceLevel: 'mid' as const,
                },
                applicationData: {
                    coverLetterTemplate:
                        'Dear Hiring Manager, I am interested in this position...',
                    availableStartDate: '2 weeks',
                    sponsorshipRequired: false,
                },
            };
            userId = profile.id;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!userStats.has(userId)) {
                userStats.set(userId, {
                    totalApplications: 0,
                    successfulApplications: 0,
                    applicationsThisWeek: 0,
                    applicationsThisMonth: 0,
                    lastApplicationDate: null,
                });
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const applySettings: AutoApplySettings = {
            maxApplicationsPerDay: settings?.maxApplicationsPerDay || 2,
            onlyEasyApply: settings?.onlyEasyApply ?? true,
            skipAppliedJobs: settings?.skipAppliedJobs ?? true,
            customAnswers: settings?.customAnswers || {},
            delayBetweenApps: settings?.delayBetweenApps || 30,
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Auto Apply
        const autoApply = new AutoApplyService();
        await autoApply.init(credentials?.email);

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å credentials
        if (credentials?.email && searchCriteria.platform === 'linkedin') {
            console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
            const isAuthorized = await autoApply.ensureLinkedInAuth(
                credentials.email,
                credentials.password
            );

            if (!isAuthorized) {
                await autoApply.close();
                return res.status(401).json({
                    success: false,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ LinkedIn',
                });
            }
        }

        // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        console.log('üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...');
        const scraper = new JobScraper();
        await scraper.init();

        const targetPlatform = searchCriteria.platform || 'indeed';
        let jobs: any[] = [];

        switch (targetPlatform) {
            case 'indeed':
                jobs = await scraper.scrapeIndeed(searchCriteria);
                break;
            case 'linkedin':
                jobs = await scraper.scrapeLinkedIn(searchCriteria);
                break;
            case 'glassdoor':
                jobs = await scraper.scrapeGlassdoor(searchCriteria);
                break;
            default:
                jobs = await scraper.scrapeIndeed(searchCriteria);
        }

        await scraper.close();

        if (jobs.length === 0) {
            await autoApply.close();
            return res.json({
                success: true,
                message: '–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                stats: { jobsFound: 0, applicationsSubmitted: 0 },
            });
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        if (applySettings.skipAppliedJobs) {
            const appliedJobUrls = new Set(
                applicationHistory
                    .filter((app) => app.userId === userId)
                    .map((app) => app.jobUrl)
            );

            jobs = jobs.filter((job) => !appliedJobUrls.has(job.url));
            console.log(
                `üîÑ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`
            );
        }

        // –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫
        console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–∞—á—É...');
        const results = await autoApply.applyToJobs(
            jobs,
            profile as any,
            applySettings
        );
        await autoApply.close();

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
        const currentTime = new Date();
        const stats = userStats.get(userId) || {
            totalApplications: 0,
            successfulApplications: 0,
            applicationsThisWeek: 0,
            applicationsThisMonth: 0,
        };

        results.forEach((result) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            applicationHistory.push({
                userId,
                jobId: result.jobId,
                jobTitle: result.jobTitle,
                company: result.company,
                platform: targetPlatform,
                jobUrl: jobs.find((j) => j.id === result.jobId)?.url || '',
                status: result.status === 'success' ? 'submitted' : 'failed',
                applicationResult: result.status,
                applicationMethod: result.applicationMethod,
                failureReason: result.reason,
                appliedAt: result.appliedAt,
                coverLetter: globalProfileService.generateCoverLetter(
                    profile,
                    result.jobTitle,
                    result.company
                ),
                searchKeywords: searchCriteria.keywords,
                searchLocation: searchCriteria.location,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (result.status === 'success') {
                stats.totalApplications++;
                stats.successfulApplications++;
                stats.lastApplicationDate = currentTime;
                stats.applicationsThisWeek++;
                stats.applicationsThisMonth++;
            }
        });

        userStats.set(userId, stats);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        const responseStats = {
            jobsFound: jobs.length,
            applicationsSubmitted: results.filter((r) => r.status === 'success')
                .length,
            applicationsSkipped: results.filter((r) => r.status === 'skipped')
                .length,
            applicationsFailed: results.filter((r) => r.status === 'failed')
                .length,
        };

        res.json({
            success: true,
            message: `–ê–≤—Ç–æ–ø–æ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–∞–Ω–æ ${responseStats.applicationsSubmitted} –∑–∞—è–≤–æ–∫`,
            stats: responseStats,
            results: results.slice(0, 10),
            userId, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º userId –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∞—á–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ–¥–∞—á–µ –∑–∞—è–≤–æ–∫',
            error: error instanceof Error ? error.message : 'Unknown error',
        });
    }
});

// GET /api/apply/auth-status/:email/:platform - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.get(
    '/auth-status/:email/:platform',
    async (req: Request, res: Response) => {
        try {
            const { email, platform } = req.params;
            const authService = new AuthService();
            const status = await authService.checkAuthStatus(platform, email);

            res.json({
                success: true,
                isAuthenticated: !!status,
                lastLogin: status?.lastLogin,
                platform,
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
            });
        }
    }
);

// DELETE /api/apply/applications/:applicationId - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
router.delete(
    '/applications/:applicationId',
    async (req: Request, res: Response) => {
        try {
            const { applicationId } = req.params;
            const { userId } = req.body;

            const index = applicationHistory.findIndex(
                (app) => app.jobId === applicationId && app.userId === userId
            );

            if (index === -1) {
                return res.status(404).json({
                    success: false,
                    message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                });
            }

            applicationHistory.splice(index, 1);

            res.json({
                success: true,
                message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏',
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏',
            });
        }
    }
);

// GET /api/apply/test - –¢–µ—Å—Ç API
router.get('/test', (req: Request, res: Response) => {
    res.json({
        success: true,
        message: 'Auto Apply API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        endpoints: [
            'POST /api/apply/profile - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
            'GET /api/apply/profile/:id - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
            'POST /api/apply/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ–¥–∞—á—É',
            'GET /api/apply/applications/:userId - –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫',
            'GET /api/apply/stats/:userId - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'DELETE /api/apply/applications/:applicationId - –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É',
            'GET /api/apply/auth-status/:email/:platform - –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        ],
        inMemoryData: {
            profiles: globalProfileService.getProfilesCount?.() || 'N/A',
            applications: applicationHistory.length,
            users: userStats.size,
        },
    });
});

export default router;
