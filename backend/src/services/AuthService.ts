import puppeteer, { Browser, Page } from 'puppeteer';
import fs from 'fs-extra';
import path from 'path';

export interface PlatformCredentials {
    email: string;
    password: string;
    platform: 'linkedin' | 'glassdoor' | 'dice' | 'monster';
}

export interface AuthSession {
    platform: string;
    email: string;
    cookies: any[];
    lastLogin: Date;
    isValid: boolean;
}

class AuthService {
    private sessionsDir = './browser-sessions';
    private browser: Browser | null = null;

    constructor() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Å—Å–∏–π
        fs.ensureDirSync(this.sessionsDir);
    }

    async initBrowser(userEmail: string): Promise<Browser> {
        const userDataDir = path.join(
            this.sessionsDir,
            this.sanitizeEmail(userEmail)
        );

        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏...');

        this.browser = await puppeteer.launch({
            headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ª–æ–≥–∏–Ω–∞
            defaultViewport: { width: 1280, height: 720 },
            userDataDir, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-blink-features=AutomationControlled',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            ],
        });

        return this.browser;
    }

    async loginToLinkedIn(email: string, password?: string): Promise<boolean> {
        if (!this.browser) {
            throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        const page = await this.browser.newPage();

        try {
            console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º LinkedIn –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ LinkedIn
            await page.goto('https://www.linkedin.com/feed/', {
                waitUntil: 'domcontentloaded',
                timeout: 60000,
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã –ª–∏ –º—ã
            const isLoggedIn = await this.checkLinkedInAuth(page);

            if (isLoggedIn) {
                console.log('‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ LinkedIn!');
                await page.close();
                return true;
            }

            console.log('üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ LinkedIn...');

            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å - –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω
            if (password) {
                return await this.autoLoginLinkedIn(page, email, password);
            } else {
                return await this.manualLoginLinkedIn(page, email);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ LinkedIn:', error);
            await page.close();
            return false;
        }
    }

    private async checkLinkedInAuth(page: Page): Promise<boolean> {
        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
            await new Promise((resolve) => setTimeout(resolve, 3000));

            const authSelectors = [
                '.global-nav__me',
                '[data-test-global-nav-me]',
                '.nav-item__profile-member-photo',
                '.global-nav__primary-item--profile',
            ];

            for (const selector of authSelectors) {
                const element = await page.$(selector);
                if (element) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${selector}`);
                    return true;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –µ—Å–ª–∏ –º—ã –Ω–∞ feed, –∑–Ω–∞—á–∏—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã
            const currentUrl = page.url();
            if (currentUrl.includes('/feed/') || currentUrl.includes('/in/')) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø–æ URL');
                return true;
            }

            return false;
        } catch (error) {
            console.log('üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return false;
        }
    }

    private async autoLoginLinkedIn(
        page: Page,
        email: string,
        password: string
    ): Promise<boolean> {
        try {
            console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –≤ LinkedIn...');

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            await page.goto('https://www.linkedin.com/login', {
                waitUntil: 'networkidle2',
            });

            // –ó–∞–ø–æ–ª–Ω—è–µ–º email
            await page.waitForSelector('#username', { timeout: 10000 });
            await page.type('#username', email, { delay: 100 });

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
            await page.waitForSelector('#password', { timeout: 5000 });
            await page.type('#password', password, { delay: 100 });

            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            await page.click('button[type="submit"]');

            // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
            await page.waitForNavigation({
                waitUntil: 'networkidle2',
                timeout: 30000,
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
            const isLoggedIn = await this.checkLinkedInAuth(page);

            if (isLoggedIn) {
                console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω!');
                await this.saveCookies(page, 'linkedin', email);
                await page.close();
                return true;
            } else {
                console.log(
                    '‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è. –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ø—á–∞ –∏–ª–∏ 2FA'
                );
                return await this.manualLoginLinkedIn(page, email);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', error);
            return await this.manualLoginLinkedIn(page, email);
        }
    }

    private async manualLoginLinkedIn(
        page: Page,
        email: string
    ): Promise<boolean> {
        try {
            console.log('üë§ –†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –≤ LinkedIn...');
            console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
            console.log('   1. –ó–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –±—Ä–∞—É–∑–µ—Ä–µ');
            console.log('   2. –†–µ—à–∏—Ç–µ –∫–∞–ø—á—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ');
            console.log('   3. –ü—Ä–æ–π–¥–∏—Ç–µ 2FA –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
            console.log('   4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞...');

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ —Ç–∞–º
            const currentUrl = page.url();
            if (!currentUrl.includes('login')) {
                await page.goto('https://www.linkedin.com/login', {
                    waitUntil: 'networkidle2',
                });
            }

            // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º email –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
            try {
                const emailField = await page.$('#username');
                if (emailField) {
                    const emailValue = await page.evaluate(
                        (el: any) => el.value,
                        emailField
                    );
                    if (!emailValue) {
                        await emailField.type(email, { delay: 100 });
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            }

            // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
            const authCheckInterval = setInterval(async () => {
                const isAuth = await this.checkLinkedInAuth(page);
                if (isAuth) {
                    console.log('‚úÖ –†—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                    clearInterval(authCheckInterval);
                }
            }, 5000);

            // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 –º–∏–Ω—É—Ç
            let attempts = 0;
            const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

            while (attempts < maxAttempts) {
                const isLoggedIn = await this.checkLinkedInAuth(page);
                if (isLoggedIn) {
                    clearInterval(authCheckInterval);
                    await this.saveCookies(page, 'linkedin', email);
                    await page.close();
                    return true;
                }

                await new Promise((resolve) => setTimeout(resolve, 5000));
                attempts++;
            }

            console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ');
            clearInterval(authCheckInterval);
            await page.close();
            return false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞:', error);
            await page.close();
            return false;
        }
    }

    private async saveCookies(
        page: Page,
        platform: string,
        email: string
    ): Promise<void> {
        try {
            const cookies = await page.cookies();
            const session: AuthSession = {
                platform,
                email,
                cookies,
                lastLogin: new Date(),
                isValid: true,
            };

            const sessionFile = path.join(
                this.sessionsDir,
                `${this.sanitizeEmail(email)}_${platform}.json`
            );

            await fs.writeJSON(sessionFile, session, { spaces: 2 });
            console.log(`üíæ –°–µ—Å—Å–∏—è ${platform} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è ${email}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies:', error);
        }
    }

    async loadCookies(
        page: Page,
        platform: string,
        email: string
    ): Promise<boolean> {
        try {
            const sessionFile = path.join(
                this.sessionsDir,
                `${this.sanitizeEmail(email)}_${platform}.json`
            );

            if (!(await fs.pathExists(sessionFile))) {
                console.log(`üìÇ –°–µ—Å—Å–∏—è –¥–ª—è ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return false;
            }

            const session: AuthSession = await fs.readJSON(sessionFile);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (7 –¥–Ω–µ–π)
            const sessionAge =
                Date.now() - new Date(session.lastLogin).getTime();
            const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π

            if (sessionAge > maxAge) {
                console.log(`‚è∞ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –¥–ª—è ${email}`);
                return false;
            }

            await page.setCookie(...session.cookies);
            console.log(`üç™ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${email}`);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies:', error);
            return false;
        }
    }

    async checkAuthStatus(
        platform: string,
        email: string
    ): Promise<AuthSession | null> {
        try {
            const sessionFile = path.join(
                this.sessionsDir,
                `${this.sanitizeEmail(email)}_${platform}.json`
            );

            if (!(await fs.pathExists(sessionFile))) {
                return null;
            }

            const session: AuthSession = await fs.readJSON(sessionFile);
            return session;
        } catch (error) {
            return null;
        }
    }

    private sanitizeEmail(email: string): string {
        return email.replace(/[^a-zA-Z0-9]/g, '_');
    }

    async close(): Promise<void> {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
    async loginToGlassdoor(email: string, password?: string): Promise<boolean> {
        console.log('üîó Glassdoor –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        return false;
    }

    async loginToDice(email: string, password?: string): Promise<boolean> {
        console.log('üîó Dice –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        return false;
    }

    async loginToMonster(email: string, password?: string): Promise<boolean> {
        console.log('üîó Monster –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        return false;
    }
}

export default AuthService;
