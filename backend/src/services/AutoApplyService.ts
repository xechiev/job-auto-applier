import puppeteer, { Browser, Page } from 'puppeteer';
import { JobData } from './JobScraper';
import ProfileService, { UserProfile } from './ProfileService';
import AuthService from './AuthService';

export interface ApplicationResult {
    jobId: string;
    jobTitle: string;
    company: string;
    status: 'success' | 'failed' | 'skipped';
    reason?: string;
    appliedAt: Date;
    applicationMethod: 'easy_apply' | 'external' | 'form_fill';
}

export interface AutoApplySettings {
    maxApplicationsPerDay: number;
    onlyEasyApply: boolean;
    skipAppliedJobs: boolean;
    customAnswers: { [question: string]: string };
    delayBetweenApps: number; // —Å–µ–∫—É–Ω–¥—ã
}

class AutoApplyService {
    private browser: Browser | null = null;
    private profileService: ProfileService;
    private authService: AuthService;
    private appliedJobs: Set<string> = new Set(); // –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫

    constructor() {
        this.profileService = new ProfileService();
        this.authService = new AuthService();
    }

    async init(userEmail?: string): Promise<void> {
        console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Auto Apply —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');

        if (userEmail) {
            this.browser = await this.authService.initBrowser(userEmail);
        } else {
            this.browser = await puppeteer.launch({
                headless: false,
                defaultViewport: { width: 1280, height: 720 },
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-blink-features=AutomationControlled',
                ],
            });
        }

        console.log('‚úÖ Auto Apply –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤');
    }

    // –í —Ñ–∞–π–ª–µ src/services/AutoApplyService.ts –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥:

    async ensureLinkedInAuth(
        email: string,
        password?: string
    ): Promise<boolean> {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é LinkedIn...');
        return await this.authService.loginToLinkedIn(email, password);
    }

    async close(): Promise<void> {
        await this.authService.close();
        if (this.browser) {
            await this.browser.close();
            console.log('üîí Auto Apply –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }

    async applyToJobs(
        jobs: JobData[],
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<ApplicationResult[]> {
        if (!this.browser) {
            throw new Error('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–∞—á—É –Ω–∞ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
        const results: ApplicationResult[] = [];
        let applicationsToday = 0;

        for (const job of jobs) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if (applicationsToday >= settings.maxApplicationsPerDay) {
                console.log(
                    `‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${settings.maxApplicationsPerDay} –∑–∞—è–≤–æ–∫`
                );
                break;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            if (settings.skipAppliedJobs && this.appliedJobs.has(job.id)) {
                results.push({
                    jobId: job.id,
                    jobTitle: job.title,
                    company: job.company,
                    status: 'skipped',
                    reason: '–£–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É',
                    appliedAt: new Date(),
                    applicationMethod: 'easy_apply',
                });
                continue;
            }

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ Easy Apply –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
            if (settings.onlyEasyApply && !job.isEasyApply) {
                results.push({
                    jobId: job.id,
                    jobTitle: job.title,
                    company: job.company,
                    status: 'skipped',
                    reason: '–ù–µ Easy Apply',
                    appliedAt: new Date(),
                    applicationMethod: 'external',
                });
                continue;
            }

            console.log(`üìù –ü–æ–¥–∞–µ–º –∑–∞—è–≤–∫—É: ${job.title} –≤ ${job.company}`);

            try {
                const result = await this.applyToSingleJob(
                    job,
                    profile,
                    settings
                );
                results.push(result);

                if (result.status === 'success') {
                    applicationsToday++;
                    this.appliedJobs.add(job.id);
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                await this.randomDelay(settings.delayBetweenApps);
            } catch (error) {
                console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ ${job.title}:`,
                    error
                );
                results.push({
                    jobId: job.id,
                    jobTitle: job.title,
                    company: job.company,
                    status: 'failed',
                    reason: `–û—à–∏–±–∫–∞: ${error}`,
                    appliedAt: new Date(),
                    applicationMethod: 'easy_apply',
                });
            }
        }

        console.log(
            `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–¥–∞–Ω–æ ${applicationsToday} –∑–∞—è–≤–æ–∫ –∏–∑ ${jobs.length}`
        );
        return results;
    }

    private async applyToSingleJob(
        job: JobData,
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<ApplicationResult> {
        const page = await this.browser!.newPage();

        try {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏
            await page.goto(job.url, { waitUntil: 'networkidle2' });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤—å—Ç–µ Indeed
            if (job.platform === 'linkedin') {
                return await this.applyLinkedIn(page, job, profile, settings);
            } else if (job.platform === 'indeed') {
                // –î–û–ë–ê–í–ò–¢–¨
                return await this.applyIndeed(page, job, profile, settings); // –î–û–ë–ê–í–ò–¢–¨
            } else {
                return await this.applyExternal(page, job, profile, settings);
            }
        } finally {
            await page.close();
        }
    }

    private async applyLinkedIn(
        page: Page,
        job: JobData,
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<ApplicationResult> {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É Easy Apply
        const easyApplyButton = await page.$('.jobs-apply-button--top-card');

        if (!easyApplyButton) {
            return {
                jobId: job.id,
                jobTitle: job.title,
                company: job.company,
                status: 'failed',
                reason: 'Easy Apply –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                appliedAt: new Date(),
                applicationMethod: 'easy_apply',
            };
        }

        // –ö–ª–∏–∫–∞–µ–º Easy Apply
        await easyApplyButton.click();
        await new Promise((resolve) => setTimeout(resolve, 2000));

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        await this.fillLinkedInForm(page, profile, settings);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        const submitButton = await page.$(
            'button[aria-label="Submit application"]'
        );
        if (submitButton) {
            await submitButton.click();
            await new Promise((resolve) => setTimeout(resolve, 3000));

            return {
                jobId: job.id,
                jobTitle: job.title,
                company: job.company,
                status: 'success',
                reason: '–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Easy Apply',
                appliedAt: new Date(),
                applicationMethod: 'easy_apply',
            };
        }

        return {
            jobId: job.id,
            jobTitle: job.title,
            company: job.company,
            status: 'failed',
            reason: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏',
            appliedAt: new Date(),
            applicationMethod: 'easy_apply',
        };
    }

    private async applyIndeed(
        page: Page,
        job: JobData,
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<ApplicationResult> {
        console.log('üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ Indeed...');

        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        await new Promise((resolve) => setTimeout(resolve, 2000));

        return {
            jobId: job.id,
            jobTitle: job.title,
            company: job.company,
            status: 'success',
            reason: '–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –Ω–∞ Indeed (—Ç–µ—Å—Ç)',
            appliedAt: new Date(),
            applicationMethod: 'easy_apply',
        };
    }

    private async fillLinkedInForm(
        page: Page,
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<void> {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        const fields = {
            'input[name="phoneNumber"]': profile.phone,
            'textarea[name="coverLetter"]':
                this.profileService.generateCoverLetter(
                    profile,
                    'Software Engineer', // –ü–æ–ª—É—á–∏–º –∏–∑ job –¥–∞–Ω–Ω—ã—Ö
                    'Company' // –ü–æ–ª—É—á–∏–º –∏–∑ job –¥–∞–Ω–Ω—ã—Ö
                ),
        };

        for (const [selector, value] of Object.entries(fields)) {
            const field = await page.$(selector);
            if (field && value) {
                await field.evaluate((el: any) => (el.value = ''));
                await field.type(value, { delay: 100 });
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        for (const [question, answer] of Object.entries(
            settings.customAnswers
        )) {
            const questionElement = await page.$(`text=${question}`);
            if (questionElement) {
                const answerField = await questionElement.$(
                    'xpath=../following-sibling::*//input | ../following-sibling::*//textarea'
                );
                if (answerField) {
                    await answerField.type(answer, { delay: 100 });
                }
            }
        }
    }

    private async applyExternal(
        page: Page,
        job: JobData,
        profile: UserProfile,
        settings: AutoApplySettings
    ): Promise<ApplicationResult> {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–∞–π—Ç–æ–≤ (Glassdoor, Dice, Monster)
        console.log(`üîó –í–Ω–µ—à–Ω—è—è –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏: ${job.platform}`);

        return {
            jobId: job.id,
            jobTitle: job.title,
            company: job.company,
            status: 'skipped',
            reason: '–í–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è',
            appliedAt: new Date(),
            applicationMethod: 'external',
        };
    }

    private async randomDelay(baseSeconds: number): Promise<void> {
        const delay = (baseSeconds + Math.random() * 5) * 1000; // +0-5 —Å–µ–∫ —Å–ª—É—á–∞–π–Ω–æ
        console.log(`‚è≥ –ü–∞—É–∑–∞ ${Math.round(delay / 1000)} —Å–µ–∫—É–Ω–¥...`);
        await new Promise((resolve) => setTimeout(resolve, delay));
    }

    getApplicationStats(): { total: number; today: number } {
        return {
            total: this.appliedJobs.size,
            today: this.appliedJobs.size, // –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–ª–∏ –±—ã –ø–æ –¥–∞—Ç–µ
        };
    }
}

export default AutoApplyService;
